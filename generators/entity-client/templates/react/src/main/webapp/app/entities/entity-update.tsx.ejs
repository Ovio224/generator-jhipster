<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%_
const i18nToLoad = [entityInstance];
for (const idx in fields) {
  if (fields[idx].fieldIsEnum === true) {
    i18nToLoad.push(fields[idx].enumInstance);
  }
}
// const query = generateEntityQueries(relationships, entityInstance, dto);
// const queries = query.queries;
// const variables = query.variables;
// let hasManyToMany = query.hasManyToMany;
_%>
import React, { useState, useEffect } from 'react';
import { connect } from 'react-redux';
import { Link, RouteComponentProps } from 'react-router-dom';
import { Fab, Paper, WithStyles, withStyles, TextField, FormControl, FormLabel } from '@material-ui/core';
import ArrowBackIcon from '@material-ui/icons/ArrowBack';
import { styles } from 'app/shared/layout/styles/entity.view.style';
import SaveIcon from '@material-ui/icons/Save';
import {
Button,
Row,
Col,
Label
<% if (haveFieldWithJavadoc) { %>, UncontrolledTooltip<% } %> } from 'reactstrap';
import { AvFeedback, AvForm, AvGroup, AvInput<% if (fieldsIsReactAvField) { %>, AvField <% } %> } from 'availity-reactstrap-validation';
import { Field, Form, Formik } from 'formik';
import {
Translate,
translate,
ICrudGetAction,
ICrudGetAllAction,
<%_ if (fieldsContainBlob) { _%>
  setFileData,
  <% if (fieldsContainBlobOrImage) { %> openFile,<% } %>
  byteSize,
<%_ } _%>
ICrudPutAction
} from 'react-jhipster';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { IRootState } from 'app/shared/reducers';
import moment from 'moment';
<%_
let hasRelationshipQuery = false;
let otherEntityActions = new Set();
let manyToManyOwners = new Set();
let relFieldNames = new Set();
let uniqueRealtionFields = new Set();


Object.keys(differentRelationships).forEach(key => {

  const hasAnyRelationshipQuery = differentRelationships[key].some(rel =>
          (rel.relationshipType === 'one-to-one' && rel.ownerSide === true && rel.otherEntityName !== 'user')
          || rel.relationshipType !== 'one-to-many'
  );
  if (hasAnyRelationshipQuery) {
    hasRelationshipQuery = true;
    differentRelationships[key].forEach(rel => {
      if (rel.relationshipType === 'many-to-many' && rel.ownerSide === true) {
        manyToManyOwners.add(rel);
      } else {
        relFieldNames.add(rel);
      }
    });
  }
if (differentRelationships[key].some(rel => rel.relationshipType !== 'one-to-many')) {
  const uniqueRel = differentRelationships[key][0];
  uniqueRealtionFields.add(uniqueRel.otherEntityNamePlural);
  otherEntityActions.add({
    action: `get${upperFirstCamelCase(uniqueRel.otherEntityNamePlural)}`,
    instance: `${uniqueRel.otherEntityNamePlural}`,
    entity: uniqueRel.otherEntityAngularName,
    reducer: uniqueRel.otherEntityAngularName === 'User' ? 'userManagement' : uniqueRel.otherEntityName
  });
if (uniqueRel.otherEntityAngularName === 'User') {
_%>
  import { I<%= uniqueRel.otherEntityAngularName %> } from 'app/shared/model/user.model';
  <%_ if (authenticationType === 'oauth2') { _%>
  import { getUsers } from 'app/shared/reducers/user-management';
  <%_ } else { _%>
  import { getUsers } from 'app/modules/administration/user-management/user-management.reducer';
  <%_ } _%>
<%_
} else {
if (uniqueRel.otherEntityAngularName !== entityReactName) {
_%>
  import { I<%= uniqueRel.otherEntityAngularName %> } from 'app/shared/model/<%= uniqueRel.otherEntityModelName %>.model';
<%_ } _%>
import { getEntities as get<%= upperFirstCamelCase(uniqueRel.otherEntityNamePlural) %> } from 'app/entities/<%= uniqueRel.otherEntityPath %>/<%= uniqueRel.otherEntityFileName %>.reducer';
<%_ }
}
}); _%>
import {
getEntity,
updateEntity,
createEntity,
<%_ if (fieldsContainBlob) { _%>
setBlob,
<%_ } _%>
reset
} from './<%= entityFileName %>.reducer';
import { I<%= entityReactName %> } from 'app/shared/model/<%= entityModelFileName %>.model';
import { APP_FNS_LOCAL_DATE_FORMAT, APP_GLOBAL_DATE_FORMAT, APP_LOCAL_DATE_FORMAT, DATE_PICKER_MASK, DATETIME_PICKER_MASK, } from 'app/config/constants';
import { convertDateTimeFromServer } from 'app/shared/util/date-utils';
<%_ if (relationships.filter(e => e.relationshipType === 'many-to-many') !== undefined) { _%>
import { mapIdList } from 'app/shared/util/entity-utils';
<%_ } _%>

export interface I<%= entityReactName %>UpdateProps extends WithStyles<typeof styles>, StateProps, DispatchProps, RouteComponentProps<{id: string}>  {}

  export const <%= entityReactName %>Update = (props: I<%= entityReactName %>UpdateProps) => {
  <%_ manyToManyOwners.forEach(val => { _%>
    const [ids<%= val.relationshipName %>, setIds<%= val.relationshipName %>] = useState([]);
  <%_ }) _%>
  <%_ relFieldNames.forEach(val => { _%>
    const [<%= val.relationshipFieldName %>Id, set<%= upperFirstCamelCase(val.relationshipFieldName) %>Id] = useState('0');
  <%_ }) _%>

  const stateInitial = {
  <% for (idx in fields) { %>
    <% if (fields[idx].fieldType === 'Boolean') { %>
    <%_ fields[idx].fieldName _%>: false,
    <%_ } else { _%>
      <%- fields[idx].fieldName _%>: null,
    <% } %>
  <% } %>
  }

  const [isNew, setIsNew] = useState(!props.match.params || !props.match.params.id);
  const [statesManager, setStatesManager] = useState(stateInitial);


  const handleFieldChange = (key, value) => {
  setStatesManager(prevState => ({ ...prevState, [key]: value }));
  };

  const handleChangeCheckbox = (name: string) => (event: React.ChangeEvent<HTMLInputElement>) => {
    setState({ ...prevState, [name]: event.target.checked });
    };

    const { <%= entityInstance %>Entity,<%
    uniqueRealtionFields.forEach(rel => {
    %> <%= rel %>,<% }) %> loading, updating } = props;

    <%_ for (var i = 0; i < blobFields.length; i++) { _%>
    <%_
      const b = blobFields[i];
    if (i === 0) {
    _%>
    const {
    <%_ } _%>
    <%= b.fieldName %>
    <%_ if (b.fieldTypeBlobContent !== 'text') { _%>
      , <%= b.fieldName %>ContentType
    <%_ } _%>
    <%_ if (i+1 === blobFields.length) { _%>
      } = <%= entityInstance %>Entity;
    <%_ } else { _%>
    ,
    <%_ } _%>
    <%_ } _%>

    const handleClose = () => {
    props.history.goBack();
    }

    useEffect(() => {
    <%_ if (pagination === 'infinite-scroll') { _%>
    if (!isNew) {
    props.getEntity(props.match.params.id);
    }
    <%_ } else { _%>
    if (isNew) {
    props.reset();
    } else {
    props.getEntity(props.match.params.id);
    }
    <%_ } _%>

    <%_ otherEntityActions.forEach(val => { _%>
      props.<%= val.action %>();
    <%_ }) _%>
    }, []);

    <%_ if (fieldsContainBlob) { _%>
    const onBlobChange = (isAnImage, name) => event => {
    setFileData(event, (contentType, data) => props.setBlob(name, data, contentType), isAnImage);
    };

    const clearBlob = name => () => {
    props.setBlob(name, undefined, undefined);
    };
    <%_ } _%>

    useEffect(() => {
    if (props.updateSuccess) {
    handleClose();
    }
    }, [props.updateSuccess]);

    const goBack = () => {
    props.history.goBack();
    }

    const validateFields = values => {
    const errors: typeof values = {};
    <%_ for (idx in fields) {
      const field = fields[idx];
      const fieldType = fields[idx].fieldType;
      const fieldName = fields[idx].fieldName;
      const fieldNameHumanized = fields[idx].fieldNameHumanized;
    _%>
    <% if (field.fieldValidate === true) { %>
      <% const rules = field.fieldValidateRules; %>
      <% const validators = []; %>
      <% if (rules.includes('required') && field.fieldType !== 'Boolean') { %>
        if(!statesManager.<%= fieldName %>) {
        errors.<%= field.fieldName %> = translate('entity.validation.required')
        };
      <% } %>
    <% } %>
    <% } %>
    return errors;
    }

    const saveEntity = () => {
    <%_ for (idx in fields) {
      const fieldType = fields[idx].fieldType;
      const fieldName = fields[idx].fieldName;
    _%>
    <%_ if (fieldType === 'Instant' || fieldType === 'ZonedDateTime')  { _%>
      statesManager.<%= fieldName %> = convertDateTimeToServer(statesManager.<%= fieldName %>);
    <%_ } _%>
    <%_ } _%>

    const entity = {
    ...<%= entityInstance %>Entity,
    ...statesManager
    <%_ manyToManyOwners.forEach(rel => { _%>
      , <%= rel.relationshipFieldNamePlural %>: mapIdList(statesManager.<%= rel.relationshipFieldNamePlural %>)
    <%_ }) _%>
    }

    if (isNew) {
    props.createEntity(entity);
    } else {
    props.updateEntity(entity);
    }
    }

    return (
    <div>
      <Row className="justify-content-center">
        <Col md="8">
        <h2 id="<%= i18nKeyPrefix %>.home.createOrEditLabel">
          <Translate contentKey="<%= i18nKeyPrefix %>.home.createOrEditLabel">Create or edit a <%= entityClass %></Translate>
        </h2>
        </Col>
      </Row>
      <Row className="justify-content-center">
        <Col md="8">
        { loading ? <p>Loading...</p> : (
        <Paper className={props.classes.paperRoot} style={{ marginTop: 16 }}>
          <Formik enableReinitialize initialValues={isNew ? {} : <%= entityInstance %>Entity} onSubmit={saveEntity}
                  validate={validateFields}>
            {({ errors, touched, isSubmitting, values, setFieldTouched }) => {
            const handleValueChange = (event, date) => {
            if (date) handleFieldChange(event, moment(date));
            else handleFieldChange(event.target.name, null);
            setFieldTouched(event, true, true);
            errors = null;
            if (date && 'name' in date) {
            handleFieldChange(date.name, event.value);
            setFieldTouched(date.name, true, true);
            errors = null;
            } else {
            handleFieldChange(event.target.name, event.target.value);
            setFieldTouched(event.target.name, true, true);
            errors = null;
            };

            <% if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(fields[idx].fieldType)) { %>
              const handleDateError = (name, error, value) => {
              if (value && error) errors[name] = error;
              };
            <% } %>
            }

            return (
            <Form>
              <%_ for (idx in fields) {
                const fieldType = fields[idx].fieldType;
                const fieldName = fields[idx].fieldName;
                const fieldNameHumanized = fields[idx].fieldNameHumanized;
              _%>
              <AvGroup <% if (fieldType === 'Boolean') { %> check <% } %>>
                <%_ if (fieldType === 'Boolean') { _%>
                  <FormControl fullWidth style={{ marginBottom: 16, marginTop: 16 }}>
                    <FormControlLabel
                            control={
                    <Checkbox checked={<%= fieldName %>}
                              onChange={handleChangeCheckbox.bind(null, '<%= fieldName %>>')}
                    value="<%= fieldName %>" />
                    }
                    label={
                    <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>">
                      <%= fieldNameHumanized %>
                    </Translate>
                    }
                    />
                  </FormControl>

                <%_ } else if (['Instant', 'ZonedDateTime'].includes(fieldType)) { _%>
                  <FormControl className={classes.formControl} fullWidth>
                    <FormLabel>
                      <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>">
                        <%= fieldNameHumanized %>
                      </Translate>
                    </FormLabel>
                    <Field
                            helperText={errors.<%= fieldName %> ? errors.<%= fieldName %> : ''}
                    error={errors.<%= fieldName %> && Boolean(errors.<%= fieldName %>)}
                    inputProps={{
                    name: "<%= fieldName %>"
                    }}
                    ampm={false}
                    fullWidth
                    clearable
                    format={APP_FNS_LOCAL_DATETIME_FORMAT}
                    placeholder={APP_FNS_LOCAL_DATETIME_FORMAT}
                    mask={DATETIME_PICKER_MASK}
                    onChange={handleValueChange.bind(null, '<%= fieldName %>')}
                    value={statesManager.<%= fieldName %>}
                    keyboard
                    clearable
                    disableOpenOnEnter
                    component={DateTimePicker}
                    />
                  </FormControl>
                <%_ } else if (fieldType === 'LocalDate') { _%>
                  <FormControl className={classes.formControl} fullWidth>
                    <FormLabel>
                      <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>">
                        <%= fieldNameHumanized %>
                      </Translate>
                    </FormLabel>
                    <Field
                            helperText={errors.<%= fieldName %> ? errors.<%= fieldName %> : ''}
                    error={errors.<%= fieldName %> && Boolean(errors.<%= fieldName %>)}
                    onError={handleDateError.bind(null, '<%= fieldName %>')}
                    inputProps={{
                    name: "<%= fieldName %>"
                    }}
                    value={statesManager.<%= fieldName %>}
                    mask={DATE_PICKER_MASK}
                    format={APP_FNS_LOCAL_DATE_FORMAT}
                    placeholder={APP_LOCAL_DATE_FORMAT}
                    onChange={handleValueChange.bind(null, '<%= fieldName %>')}
                    clearable
                    component={KeyboardDatePicker}
                    />
                  </FormControl>
                <%_
                } else if (fields[idx].fieldIsEnum) {
                  const values = fields[idx].fieldValues.replace(/\s/g, '').split(',');
                _%>
                <Label id="<%= fieldName %>Label" for="<%= entityFileName %>-<%= fieldName %>">
                  <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>">
                    <%= fieldNameHumanized %>
                  </Translate>
                </Label>
                <AvInput
                        id="<%= entityFileName %>-<%= fieldName %>"
                        type="select"
                        className="form-control"
                        name="<%= fieldName %>"
                        value={(!isNew && <%= entityInstance %>Entity.<%= fieldName %>) || '<%= values[0] %>'}
                >
                <%_
                  const enumPrefix = angularAppName + '.'+ fieldType;
                        for (key in values) {
                  const value = values[key];
                _%>
                <option value="<%= value %>">
                  <%_ if (enableTranslation) { _%>
                    {translate("<%= enumPrefix %>.<%= value %>")}
                  <%_ } else { _%>
                    <%= value %>
                  <%_ } _%>
                </option>
                <%_ } _%>
                </AvInput>
                <%_ } else if (['Integer', 'Long', 'Float', 'Double'].includes(fieldType)) { _%>
                  <FormControl fullWidth style={{ marginBottom: 16, marginTop: 16 }}>
                    <FormLabel>
                      <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>">
                        <%= fieldNameHumanized %>
                      </Translate>
                    </FormLabel>

                    <Field
                            helperText={errors.<%= fieldName %> ? errors.<%= fieldName %> : ''}
                    error={errors.<%= fieldName %> && Boolean(errors.<%= fieldName %>)}
                    inputProps={{
                    name: "<%= fieldName %>"
                    }}
                    type="number"
                    onChange={handleValueChange}
                    value={statesManager.<%= fieldName %>}
                    component={TextField}
                    />
                  </FormControl>

                  <Label id="<%= fieldName %>Label" for="<%= entityFileName %>-<%= fieldName %>">

                  </Label>
                  <AvField id="<%= entityFileName %>-<%= fieldName %>" type="string" className="form-control" name="<%= fieldName %>" />
                <%_
                } else if (['byte[]', 'ByteBuffer'].includes(fieldType)) {

                  const fieldBlobType = fields[idx].fieldTypeBlobContent;
                if (fieldBlobType !== 'text') {
                  const isAnImage = fieldBlobType === 'image';
                  const capitalizedFirstLetter =  _.upperFirst(fieldName);

                _%>

                <AvGroup>
                  <Label id="<%= fieldName %>Label" for="<%= fieldName %>">
                    <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>">
                      <%= fieldNameHumanized %>
                    </Translate>
                  </Label>
                  <br />
                  {<%= fieldName %> ? (
                  <div>
                    <a onClick={openFile(<%= fieldName %>ContentType, <%= fieldName %>)}>
                      <%_ if (isAnImage) { _%>
                        <img src={`data:${<%= fieldName %>ContentType};base64,${<%= fieldName %>}`} style={{ maxHeight: '100px' }} />
                      <%_ } else { _%>
                      <Translate contentKey="entity.action.open">Open</Translate>
                      <%_ } _%>
                    </a>
                    <br />
                    <Row>
                      <Col md="11">
                      <span>{<%= fieldName %>ContentType}, {byteSize(<%= fieldName %>)}</span>
                      </Col>
                      <Col md="1">
                      <Button color="danger" onClick={clearBlob('<%= fieldName %>')}><FontAwesomeIcon icon="times-circle" /></Button>
                      </Col>
                    </Row>
                  </div>
                  ) : null}
                  <input id="file_<%= fieldName %>" type="file" onChange={onBlobChange(<%= isAnImage %>, '<%= fieldName %>')} <% if (isAnImage) { %>accept="image/*"<% } %> />
                  <AvInput type="hidden" name="<%= fieldName %>" value={<%= fieldName %>} />
                </AvGroup>

                <%_ } else { _%>
                  <FormControl fullWidth style={{ marginBottom: 16, marginTop: 16 }}>
                    <FormLabel>
                      <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>">
                        <%= fieldNameHumanized %>
                      </Translate>
                    </FormLabel>

                    <Field
                            helperText={errors.<%= fieldName %> ? errors.<%= fieldName %> : ''}
                    error={errors.<%= fieldName %> && Boolean(errors.<%= fieldName %>)}
                    inputProps={{
                    name: "<%= fieldName %>"
                    }}
                    multiline
                    onChange={handleValueChange}
                    value={statesManager.<%= fieldName %>}
                    component={TextField}
                    />
                  </FormControl>
                <%_ } _%>
                <%_ } else { _%>
                  <FormControl fullWidth style={{ marginBottom: 16, marginTop: 16 }}>
                    <FormLabel>
                      <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>">
                        <%= fieldNameHumanized %>
                      </Translate>
                    </FormLabel>

                    <Field
                            helperText={errors.<%= fieldName %> ? errors.<%= fieldName %> : ''}
                    error={errors.<%= fieldName %> && Boolean(errors.<%= fieldName %>)}
                    inputProps={{
                    name: "<%= fieldName %>"
                    }}
                    onChange={handleValueChange}
                    value={statesManager.<%= fieldName %>}
                    component={TextField}
                    />
                  </FormControl>

                <%_ } _%>
                <%_ if (fields[idx].javadoc) { _%>
                  <UncontrolledTooltip target="<%= fieldName %>Label">
                    <%_ if (enableTranslation) { _%>
                      <Translate contentKey="<%= i18nKeyPrefix %>.help.<%= fieldName %>"/>
                    <%_ } else { _%>
                      <%= fields[idx].javadoc %>
                    <%_ } _%>
                  </UncontrolledTooltip>
                <%_ } _%>
              </AvGroup>
              <%_ } _%>
              <%_ relationships.forEach(rel => {
                const relationshipType = rel.relationshipType;
                const ownerSide = rel.ownerSide;
                const otherEntityName = rel.otherEntityName;
                const otherEntityNamePlural = rel.otherEntityNamePlural;
                const otherEntityNameCapitalized = rel.otherEntityNameCapitalized;
                const relationshipName = rel.relationshipName;
                const relationshipNameHumanized = rel.relationshipNameHumanized;
                const relationshipFieldName = rel.relationshipFieldName;
                const relationshipFieldNamePlural = rel.relationshipFieldNamePlural;
                const otherEntityField = rel.otherEntityField;
                const otherEntityFieldCapitalized = rel.otherEntityFieldCapitalized;
                const relationshipRequired = rel.relationshipRequired;
                const translationKey = `${i18nKeyPrefix}.${relationshipName}`; _%>
              <%_ if (relationshipType === 'many-to-one' || (relationshipType === 'one-to-one' && ownerSide === true && otherEntityName === 'user')) { _%>

              <%_ if (dto === 'no') { _%>
              <%_ if (!relationshipRequired) { _%>


                <AvInput
                        id="<%= entityFileName %>-<%= relationshipName %>"
                        type="select"
                        className="form-control"
                        name="<%= relationshipFieldName %>.id"
                >
                  <option value="" key="0" />
                  {
                  <%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>.map(otherEntity =>
                  <option
                          value={otherEntity.id}
                          key={otherEntity.id}>
                    {otherEntity.<%= otherEntityField %>}
                  </option>
                  ) : null
                  }
                </AvInput>
              <%_ } else { _%>
                <FormLabel>
                  <Translate contentKey="<%= translationKey %>"><%= relationshipNameHumanized %></Translate>
                </FormLabel>
                <Field
                        error={touched.<%= relationshipFieldName %>Id && Boolean(errors.<%= relationshipFieldName %>Id)}
                        inputProps={{
                        name: "<%= relationshipFieldName %>Id"
                }}
                placeholder={<Translate contentKey="entity.action.select.placeholder">Select</Translate>}
                options={
                (<%= otherEntityNamePlural %>)
                ? [
                { value: '', label: '' },
                ...<%= otherEntityNamePlural %>.map(otherEntity => ({
                value: otherEntity.id,
                label: otherEntity.<%= otherEntityField %>
                }))
                ]
                : null
                }
                }
                value={
                <%= otherEntityNamePlural %> ?
                <%= otherEntityNamePlural %>.filter(otherEntity => otherEntity.id === <%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>.id)
                .map(otherEntity => ({
                value: otherEntity.id,
                label: otherEntity.<%= otherEntityField %>
                }))
                : null
                }
                onChange={handleValueChange}
                component={ReactSelect}
                />
                {touched.<%= relationshipFieldName %>Id && Boolean(errors.<%= relationshipFieldName %>Id) ? (
                <FormHelperText error>
                  <span>{errors."<%= relationshipFieldName %>"}</span>
                </FormHelperText>
                ) : null}
              <%_ } _%>
              <%_ } else { _%>
                {/* TODO: This component is generic, modify it according to your needs */}
                <FormLabel>
                  <Translate contentKey="<%= translationKey %>"><%= relationshipNameHumanized %></Translate>
                </FormLabel>
                <Field
                        error={touched.<%= relationshipFieldName %>Id && Boolean(errors.<%= relationshipFieldName %>Id)}
                        inputProps={{
                        name: "<%= relationshipFieldName %>Id"
                }}
                placeholder={<Translate contentKey="entity.action.select.placeholder">Select</Translate>}
                options={
                (<%= otherEntityNamePlural %>)
                ? [
                { value: '', label: '' },
                ...<%= otherEntityNamePlural %>.map(otherEntity => ({
                value: otherEntity.id,
                label: otherEntity.<%= otherEntityField %>
                }))
                ]
                : null
                }
                }
                value={
                <%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>
                ? <%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>
                .filter(otherEntity => otherEntity.id === <%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>.id)
                .map(otherEntity => ({
                value: otherEntity.id,
                label: otherEntity.<%= otherEntityField %>
                }))
                : null
                }
                onChange={handleValueChange}
                component={ReactSelect}
                />
                {touched.<%= relationshipFieldName %>Id && Boolean(errors.<%= relationshipFieldName %>Id) ? (
                <FormHelperText error>
                  <span>{errors."<%= relationshipFieldName %>"}</span>
                </FormHelperText>
                ) : null}
              <%_ } _%>
              <%_ if (!relationshipRequired) { _%>
                {/* TODO: This component is generic, modify it according to your needs */}
                <FormLabel>
                  <Translate contentKey="<%= translationKey %>"><%= relationshipNameHumanized %></Translate>
                </FormLabel>
                <Field
                        error={touched.<%= relationshipFieldName %>Id && Boolean(errors.<%= relationshipFieldName %>Id)}
                        inputProps={{
                        name: "<%= relationshipFieldName %>Id"
                }}
                placeholder={<Translate contentKey="entity.action.select.placeholder">Select</Translate>}
                options={
                (<%= otherEntityNamePlural %>)
                ? [
                { value: '', label: '' },
                ...<%= otherEntityNamePlural %>.map(otherEntity => ({
                value: otherEntity.id,
                label: otherEntity.<%= otherEntityField %>
                }))
                ]
                : null
                }
                }
                value={
                <%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>
                ? <%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>
                .filter(otherEntity => otherEntity.id === <%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>.id)
                .map(otherEntity => ({
                value: otherEntity.id,
                label: otherEntity.<%= otherEntityField %>
                }))
                : null
                }
                onChange={handleValueChange}
                component={ReactSelect}
                />
                {touched.<%= relationshipFieldName %>Id && Boolean(errors.<%= relationshipFieldName %>Id) ? (
                <FormHelperText error>
                  <span>{errors."<%= relationshipFieldName %>"}</span>
                </FormHelperText>
                ) : null}
              <%_ } else { _%>
                {/* TODO: This component is generic, modify it according to your needs */}
                <FormLabel>
                  <Translate contentKey="<%= translationKey %>"><%= relationshipNameHumanized %></Translate>
                </FormLabel>
                <Field
                        error={touched.<%= relationshipFieldName %>Id && Boolean(errors.<%= relationshipFieldName %>Id)}
                        inputProps={{
                        name: "<%= relationshipFieldName %>Id"
                }}
                placeholder={<Translate contentKey="entity.action.select.placeholder">Select</Translate>}
                options={
                (<%= otherEntityNamePlural %>)
                ? [
                { value: '', label: '' },
                ...<%= otherEntityNamePlural %>.map(otherEntity => ({
                value: otherEntity.id,
                label: otherEntity.<%= otherEntityField %>
                }))
                ]
                : null
                }
                }
                value={
                <%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>
                ? <%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>
                .filter(otherEntity => otherEntity.id === <%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>.id)
                .map(otherEntity => ({
                value: otherEntity.id,
                label: otherEntity.<%= otherEntityField %>
                }))
                : null
                }
                onChange={handleValueChange}
                component={ReactSelect}
                />
                {touched.<%= relationshipFieldName %>Id && Boolean(errors.<%= relationshipFieldName %>Id) ? (
                <FormHelperText error>
                  <span>{errors."<%= relationshipFieldName %>"}</span>
                </FormHelperText>
                ) : null}
                <%_ } _%>
              <%_ } else if (relationshipType === 'one-to-one' && ownerSide === true) { _%>
              <%_ if (dto === 'no') { _%>
                {/* TODO: This component is generic, modify it according to your needs */}

                <FormLabel>
                  <Translate contentKey="<%= translationKey %>"><%= relationshipNameHumanized %></Translate>
                </FormLabel>
                <Field
                        error={touched.<%= relationshipFieldName %>Id && Boolean(errors.<%= relationshipFieldName %>Id)}
                        inputProps={{
                        name: "<%= relationshipFieldName %>Id"
                }}
                placeholder={<Translate contentKey="entity.action.select.placeholder">Select</Translate>}
                options={
                (<%= otherEntityNamePlural %>)
                ? [
                { value: '', label: '' },
                ...<%= otherEntityNamePlural %>.map(otherEntity => ({
                value: otherEntity.id,
                label: otherEntity.<%= otherEntityField %>
                }))
                ]
                : null
                }
                }
                value={
                <%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>
                ? <%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>
                .filter(otherEntity => otherEntity.id === <%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>.id)
                .map(otherEntity => ({
                value: otherEntity.id,
                label: otherEntity.<%= otherEntityField %>
                }))
                : null
                }
                onChange={handleValueChange}
                component={ReactSelect}
                />
                {touched.<%= relationshipFieldName %>Id && Boolean(errors.<%= relationshipFieldName %>Id) ? (
                <FormHelperText error>
                  <span>{errors."<%= relationshipFieldName %>"}</span>
                </FormHelperText>
                ) : null}
              <%_ } else { _%>
                {/* TODO: This component is generic, modify it according to your needs */}

                <FormLabel>
                  <Translate contentKey="<%= translationKey %>"><%= relationshipNameHumanized %></Translate>
                </FormLabel>
                <Field
                        error={touched.<%= relationshipFieldName %>Id && Boolean(errors.<%= relationshipFieldName %>Id)}
                        inputProps={{
                        name: "<%= relationshipFieldName %>Id"
                }}
                placeholder={<Translate contentKey="entity.action.select.placeholder">Select</Translate>}
                options={
                (<%= otherEntityNamePlural %>)
                ? [
                { value: '', label: '' },
                ...<%= otherEntityNamePlural %>.map(otherEntity => ({
                value: otherEntity.id,
                label: otherEntity.<%= otherEntityField %>
                }))
                ]
                : null
                }
                }
                value={
                <%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>
                ? <%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>
                .filter(otherEntity => otherEntity.id === <%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>.id)
                .map(otherEntity => ({
                value: otherEntity.id,
                label: otherEntity.<%= otherEntityField %>
                }))
                : null
                }
                onChange={handleValueChange}
                component={ReactSelect}
                />
                {touched.<%= relationshipFieldName %>Id && Boolean(errors.<%= relationshipFieldName %>Id) ? (
                <FormHelperText error>
                  <span>{errors."<%= relationshipFieldName %>"}</span>
                </FormHelperText>
                ) : null}
              <%_ } _%>
              <%_ } else if (relationshipType === 'many-to-many' && rel.ownerSide === true) { _%>
                {/* TODO: This component is generic, modify it according to your needs */}

                <FormLabel>
                  <Translate contentKey="<%= translationKey %>"><%= relationshipNameHumanized %></Translate>
                </FormLabel>
                <Field
                        error={touched.<%= relationshipFieldNamePlural %> && Boolean(errors.<%= relationshipFieldNamePlural %>)}
                        inputProps={{
                        name: "<%= relationshipFieldNamePlural %>"
                }}
                placeholder={<Translate contentKey="entity.action.select.placeholder">Select</Translate>}
                options={
                (<%= otherEntityNamePlural %>)
                ? [
                { value: '', label: '' },
                ...<%= otherEntityNamePlural %>.map(otherEntity => ({
                value: otherEntity.id,
                label: otherEntity.<%= otherEntityField %>
                }))
                ]
                : null
                }
                }
                value={
                <%= entityInstance %>Entity.<%= relationshipFieldNamePlural %>
                ? <%= entityInstance %>Entity.<%= relationshipFieldNamePlural %>
                .filter(otherEntity => otherEntity.id === <%= entityInstance %>Entity.<%= relationshipFieldNamePlural %>.id)
                .map(otherEntity => ({
                value: otherEntity.id,
                label: otherEntity.<%= otherEntityField %>
                }))
                : null
                }
                isMulti
                onChange={handleValueChange}
                component={ReactSelect}
                />
                {touched.<%= relationshipFieldNamePlural %> && Boolean(errors.<%= relationshipFieldNamePlural %>) ? (
                <FormHelperText error>
                  <span>{errors."<%= relationshipFieldNamePlural %>"}</span>
                </FormHelperText>
                ) : null}
              <%_ } _%>
              <%_ } ) _%>
              <div className="buttons-centered-mobile">
                <Fab onClick={goBack} style={{ marginRight: '8px' }} color="default" size="medium">
                <ArrowBackIcon />
                </Fab>

                <Fab
                        id="save-entity"
                        style={{ margin: '8px' }}
                color="secondary"
                type="submit"
                disabled={updating}
                size="medium"
                >
                <SaveIcon />
                </Fab>
              </div>
            </Form>
            );
            }}
          </Formik>
        </Paper>
        )}
        </Col>
      </Row>
    </div>
    );
    };

    const mapStateToProps = (storeState: IRootState) => ({
    <%_ otherEntityActions.forEach(val => { _%>
      <%= val.instance %>: storeState.<%= val.reducer %>.<%= val.entity === 'User' ? val.instance : 'entities' %>,
    <%_ }) _%>
    <%= entityInstance %>Entity: storeState.<%= entityInstance %>.entity,
    loading: storeState.<%= entityInstance %>.loading,
    updating: storeState.<%= entityInstance %>.updating,
    updateSuccess: storeState.<%= entityInstance %>.updateSuccess,
    });

    const mapDispatchToProps = {
    <%_ otherEntityActions.forEach(val => { _%>
      <%= val.action %>,
    <%_ }) _%>
    getEntity,
    updateEntity,
    <%_ if (fieldsContainBlob) { _%>
    setBlob,
    <%_ } _%>
    createEntity,
    reset
    };

    type StateProps = ReturnType<typeof mapStateToProps>;
      type DispatchProps = typeof mapDispatchToProps;

      export default connect(
      mapStateToProps,
      mapDispatchToProps
      )(withStyles(styles)(<%= entityReactName %>Update));
